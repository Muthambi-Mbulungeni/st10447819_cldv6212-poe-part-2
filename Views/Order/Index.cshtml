<!-- Views/Order/Index.cshtml -->
@model IEnumerable<ABCRetailers.Models.Order>
@{
    ViewData["Title"] = "Orders";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-shopping-cart"></i> Orders</h2>
    <a asp-action="Create" class="btn btn-primary">
        <i class="fas fa-plus"></i> Add Order
    </a>
</div>

<!-- Search and Filter Bar -->
<div class="card mb-4 shadow-sm">
    <div class="card-body">
        <div class="row">
            <div class="col-md-5">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" id="orderSearchInput" class="form-control" placeholder="Search by order ID, username, or product...">
                </div>
            </div>
            <div class="col-md-3">
                <select id="statusFilter" class="form-select">
                    <option value="">All Statuses</option>
                    <option value="Submitted">Submitted</option>
                    <option value="Processing">Processing</option>
                    <option value="Completed">Completed</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
            </div>
            <div class="col-md-2">
                <select id="sortBy" class="form-select">
                    <option value="date-desc">Newest First</option>
                    <option value="date-asc">Oldest First</option>
                    <option value="price-desc">Price High-Low</option>
                    <option value="price-asc">Price Low-High</option>
                </select>
            </div>
            <div class="col-md-2">
                <button class="btn btn-outline-secondary w-100" onclick="clearOrderFilters()">
                    <i class="fas fa-times"></i> Clear
                </button>
            </div>
        </div>
        <small class="text-muted mt-2 d-block">
            <span id="orderResultCount">@Model.Count()</span> order(s) found
        </small>
    </div>
</div>

<!-- Status Summary Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-white bg-primary">
            <div class="card-body">
                <h6 class="card-title">Submitted</h6>
                <h3>@Model.Count(o => o.Status == "Submitted")</h3>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-info">
            <div class="card-body">
                <h6 class="card-title">Processing</h6>
                <h3>@Model.Count(o => o.Status == "Processing")</h3>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-success">
            <div class="card-body">
                <h6 class="card-title">Completed</h6>
                <h3>@Model.Count(o => o.Status == "Completed")</h3>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-danger">
            <div class="card-body">
                <h6 class="card-title">Cancelled</h6>
                <h3>@Model.Count(o => o.Status == "Cancelled")</h3>
            </div>
        </div>
    </div>
</div>

@if (Model.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Order ID</th>
                    <th>Username</th>
                    <th>Product</th>
                    <th>Order Date</th>
                    <th>Quantity</th>
                    <th>Total Price</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.OrderByDescending(o => o.OrderDate))
                {
                    <tr>
                        <td><code>@order.OrderId.Substring(0, 8)...</code></td>
                        <td>@order.Username</td>
                        <td>@order.ProductName</td>
                        <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                        <td>@order.Quantity</td>
                        <td>@order.TotalPrice.ToString("C")</td>
                        <td>
                            <span class="badge bg-@(GetStatusBadgeClass(order.Status))">
                                @order.Status
                            </span>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a asp-action="Details" asp-route-id="@order.RowKey" class="btn btn-sm btn-outline-info" title="Details">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a asp-action="Edit" asp-route-id="@order.RowKey" class="btn btn-sm btn-outline-primary" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </a>

                                <!-- Status Update Dropdown -->
                                @if (order.Status != "Completed" && order.Status != "Cancelled")
                                {
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-warning dropdown-toggle" data-bs-toggle="dropdown" title="Update Status">
                                            <i class="fas fa-sync-alt"></i>
                                        </button>
                                        <ul class="dropdown-menu">
                                            @if (order.Status == "Submitted")
                                            {
                                                <li>
                                                    <a class="dropdown-item" href="#" onclick="updateOrderStatus('@order.RowKey', 'Processing')">
                                                        <i class="fas fa-cog text-info"></i> Mark as Processing
                                                    </a>
                                                </li>
                                            }
                                            @if (order.Status == "Processing")
                                            {
                                                <li>
                                                    <a class="dropdown-item" href="#" onclick="updateOrderStatus('@order.RowKey', 'Completed')">
                                                        <i class="fas fa-check text-success"></i> Mark as Completed
                                                    </a>
                                                </li>
                                            }
                                            <li>
                                                <a class="dropdown-item" href="#" onclick="updateOrderStatus('@order.RowKey', 'Cancelled')">
                                                    <i class="fas fa-times text-danger"></i> Cancel Order
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                }

                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="confirmDelete('@order.RowKey', '@order.OrderId')" title="Delete">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> No orders found.
        <a asp-action="Create" class="alert-link">Create your first order</a>!
    </div>
}

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete order <strong id="orderId"></strong>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDeleteOrderBtn" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

@{
    string GetStatusBadgeClass(string status) => status?.ToLower() switch
    {
        "submitted" => "primary",
        "processing" => "info",
        "completed" => "success",
        "cancelled" => "danger",
        _ => "secondary"
    };
}

@section Scripts {
    <script>
        // Toast Notification Function
        function showToast(message, type = 'success') {
            const toastContainer = document.getElementById('toastContainer') || createToastContainer();
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            toast.addEventListener('hidden.bs.toast', () => toast.remove());
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toastContainer';
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            container.style.zIndex = '9999';
            document.body.appendChild(container);
            return container;
        }

        // Search and Filter Functionality
        function filterOrders() {
            const searchTerm = document.getElementById('orderSearchInput').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            const rows = Array.from(document.querySelectorAll('tbody tr'));
            let visibleCount = 0;

            rows.forEach(row => {
                const orderId = row.cells[0].textContent.toLowerCase();
                const username = row.cells[1].textContent.toLowerCase();
                const product = row.cells[2].textContent.toLowerCase();
                const status = row.cells[6].querySelector('.badge').textContent.trim();

                const matchesSearch = orderId.includes(searchTerm) || 
                                    username.includes(searchTerm) || 
                                    product.includes(searchTerm);
                const matchesStatus = !statusFilter || status === statusFilter;

                if (matchesSearch && matchesStatus) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });

            document.getElementById('orderResultCount').textContent = visibleCount;
        }

        function sortOrders() {
            const sortBy = document.getElementById('sortBy').value;
            const tbody = document.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            rows.sort((a, b) => {
                if (sortBy === 'date-desc' || sortBy === 'date-asc') {
                    const dateA = new Date(a.cells[3].textContent);
                    const dateB = new Date(b.cells[3].textContent);
                    return sortBy === 'date-desc' ? dateB - dateA : dateA - dateB;
                } else if (sortBy === 'price-desc' || sortBy === 'price-asc') {
                    const priceA = parseFloat(a.cells[5].textContent.replace(/[^0-9.-]+/g,""));
                    const priceB = parseFloat(b.cells[5].textContent.replace(/[^0-9.-]+/g,""));
                    return sortBy === 'price-desc' ? priceB - priceA : priceA - priceB;
                }
            });

            rows.forEach(row => tbody.appendChild(row));
        }

        function clearOrderFilters() {
            document.getElementById('orderSearchInput').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('sortBy').value = 'date-desc';
            sortOrders();
            filterOrders();
        }

        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('orderSearchInput').addEventListener('input', filterOrders);
            document.getElementById('statusFilter').addEventListener('change', filterOrders);
            document.getElementById('sortBy').addEventListener('change', sortOrders);
        });

        function confirmDelete(orderRowKey, orderId) {
            if (typeof clearStuckModalBackdrop === 'function') { clearStuckModalBackdrop(); }
            document.getElementById('orderId').textContent = orderId.substring(0, 8) + '...';
            let deleteId = document.getElementById('deleteOrderId');
            if (!deleteId) {
                deleteId = document.createElement('input');
                deleteId.type = 'hidden';
                deleteId.id = 'deleteOrderId';
                document.getElementById('deleteModal').appendChild(deleteId);
            }
            deleteId.value = orderRowKey;
            const modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('deleteModal'));
            modal.show();
        }

        function updateOrderStatus(orderRowKey, newStatus) {
            event.preventDefault();
            if (confirm(`Are you sure you want to change the status to "${newStatus}"?`)) {
                showToast('Updating order status...', 'info');
                fetch('/Order/UpdateOrderStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: orderRowKey,
                        newStatus: newStatus
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(`Status updated to ${newStatus}!`, 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast('Error: ' + data.message, 'danger');
                    }
                })
                .catch(error => {
                    showToast('An error occurred while updating the status', 'danger');
                });
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const modalEl = document.getElementById('deleteModal');
            const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
            const confirmBtn = document.getElementById('confirmDeleteOrderBtn');
            const getId = () => document.getElementById('deleteOrderId')?.value || '';

            if (modalEl && !modalEl.dataset.cleanupBound) {
                modalEl.addEventListener('hidden.bs.modal', function () {
                    if (typeof clearStuckModalBackdrop === 'function') { clearStuckModalBackdrop(); }
                });
                modalEl.dataset.cleanupBound = 'true';
            }

            if (confirmBtn) {
                confirmBtn.addEventListener('click', async function () {
                    confirmBtn.disabled = true;
                    try {
                        const id = getId();
                        const res = await fetch('/Order/DeleteAjax', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ id })
                        });
                        const data = await res.json();
                        try { modal.hide(); } catch (_) {}
                        if (typeof clearStuckModalBackdrop === 'function') { setTimeout(clearStuckModalBackdrop, 0); }
                        if (data && data.success) {
                            window.location.reload();
                        } else {
                            alert('Delete failed: ' + (data && data.message ? data.message : 'Unknown error'));
                        }
                    } catch (e) {
                        try { modal.hide(); } catch (_) {}
                        if (typeof clearStuckModalBackdrop === 'function') { setTimeout(clearStuckModalBackdrop, 0); }
                        alert('Delete failed.');
                    } finally {
                        confirmBtn.disabled = false;
                    }
                });
            }
        });
    </script>
}











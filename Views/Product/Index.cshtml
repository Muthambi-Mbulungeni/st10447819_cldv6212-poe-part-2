<!-- Views/Product/Index.cshtml -->
@model IEnumerable<ABCRetailers.Models.Product>
@{
    ViewData["Title"] = "Products";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-box"></i> Products</h2>
    <a asp-action="Create" class="btn btn-primary">
        <i class="fas fa-plus"></i> Add New Product
    </a>
</div>

<!-- Search Bar -->
<div class="card mb-4 shadow-sm">
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" id="searchInput" class="form-control" placeholder="Search by product name, description, or ID...">
                </div>
            </div>
            <div class="col-md-3">
                <select id="stockFilter" class="form-select">
                    <option value="">All Stock Levels</option>
                    <option value="high">High Stock (>10)</option>
                    <option value="low">Low Stock (1-10)</option>
                    <option value="out">Out of Stock</option>
                </select>
            </div>
            <div class="col-md-3">
                <button class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                    <i class="fas fa-times"></i> Clear Filters
                </button>
            </div>
        </div>
        <small class="text-muted mt-2 d-block">
            <span id="resultCount">@Model.Count()</span> product(s) found
        </small>
    </div>
</div>

@if (Model.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Image</th>
                    <th>Product ID</th>
                    <th>Product Name</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>Stock Available</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in Model)
                {
                    <tr>
                        <td>
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" alt="@product.ProductName" class="img-thumbnail" style="width: 50px; height: 50px; object-fit: cover;">
                            }
                            else
                            {
                                <div class="bg-light d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                                    <i class="fas fa-image text-muted"></i>
                                </div>
                            }
                        </td>
                        <td><code>@product.ProductId.Substring(0, 8)...</code></td>
                        <td>@product.ProductName</td>
                        <td>@(product.Description.Length > 50 ? product.Description.Substring(0, 50) + "..." : product.Description)</td>
                        <td>
                            <strong class="text-success">@product.Price.ToString("C")</strong>
                            @if (product.Price <= 0)
                            {
                                <br />
                    
                                <small class="text-danger">⚠️ Price not set</small>
                            }
                        </td>
                        <td>
                            <span class="badge bg-@(product.StockAvailable > 10 ? "success" : product.StockAvailable > 0 ? "warning" : "danger")">
                                @product.StockAvailable
                            </span>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a asp-action="Edit" asp-route-id="@product.RowKey" class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="confirmDelete('@product.RowKey', '@product.ProductName')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> No products found.
        <a asp-action="Create" class="alert-link">Add your first product</a>!
    </div>
}

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete product <strong id="productName"></strong>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search and Filter Functionality
        function filterProducts() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const stockFilter = document.getElementById('stockFilter').value;
            const rows = document.querySelectorAll('tbody tr');
            let visibleCount = 0;

            rows.forEach(row => {
                const productName = row.cells[2].textContent.toLowerCase();
                const description = row.cells[3].textContent.toLowerCase();
                const productId = row.cells[1].textContent.toLowerCase();
                const stock = parseInt(row.cells[5].querySelector('.badge').textContent);

                // Search filter
                const matchesSearch = productName.includes(searchTerm) || 
                                    description.includes(searchTerm) || 
                                    productId.includes(searchTerm);

                // Stock filter
                let matchesStock = true;
                if (stockFilter === 'high') matchesStock = stock > 10;
                else if (stockFilter === 'low') matchesStock = stock > 0 && stock <= 10;
                else if (stockFilter === 'out') matchesStock = stock === 0;

                if (matchesSearch && matchesStock) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });

            document.getElementById('resultCount').textContent = visibleCount;
        }

        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('stockFilter').value = '';
            filterProducts();
        }

        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('searchInput').addEventListener('input', filterProducts);
            document.getElementById('stockFilter').addEventListener('change', filterProducts);
        });

        function confirmDelete(productId, productName) {
            // Ensure no stale backdrops exist before opening
            if (typeof clearStuckModalBackdrop === 'function') { clearStuckModalBackdrop(); }

            document.getElementById('productName').textContent = productName;
            document.getElementById('deleteId').value = productId;
            // no non-AJAX form post; handled via fetch

            const modalEl = document.getElementById('deleteModal');
            const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
            modal.show();
        }

        document.addEventListener('DOMContentLoaded', function () {
            const modalEl = document.getElementById('deleteModal');
            const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
            const confirmBtn = document.getElementById('confirmDeleteBtn');
            // Create a hidden input to carry id since we no longer have a form
            let deleteIdInput = document.getElementById('deleteId');
            if (!deleteIdInput) {
                deleteIdInput = document.createElement('input');
                deleteIdInput.type = 'hidden';
                deleteIdInput.id = 'deleteId';
                modalEl.appendChild(deleteIdInput);
            }
            if (confirmBtn && deleteIdInput) {
                confirmBtn.addEventListener('click', async function () {
                    confirmBtn.disabled = true;
                    try {
                        const res = await fetch('/Product/DeleteAjax', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ id: deleteIdInput.value })
                        });
                        const data = await res.json();
                        try { modal.hide(); } catch (_) {}
                        if (typeof clearStuckModalBackdrop === 'function') { setTimeout(clearStuckModalBackdrop, 0); }
                        if (data && data.success) {
                            window.location.reload();
                        } else {
                            alert('Delete failed: ' + (data && data.message ? data.message : 'Unknown error'));
                        }
                    } catch (e) {
                        try { modal.hide(); } catch (_) {}
                        if (typeof clearStuckModalBackdrop === 'function') { setTimeout(clearStuckModalBackdrop, 0); }
                        alert('Delete failed.');
                    } finally {
                        confirmBtn.disabled = false;
                    }
                });
            }

            // One-time listeners to aggressively clean up backdrops
            if (modalEl && !modalEl.dataset.cleanupBound) {
                modalEl.addEventListener('hidden.bs.modal', function () {
                    if (typeof clearStuckModalBackdrop === 'function') { clearStuckModalBackdrop(); }
                });
                modalEl.addEventListener('hidePrevented.bs.modal', function () {
                    if (typeof clearStuckModalBackdrop === 'function') { clearStuckModalBackdrop(); }
                });
                modalEl.dataset.cleanupBound = 'true';
            }
        });
    </script>
}








